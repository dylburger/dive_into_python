";".join(["%s=%s" % (k, v) for k, v in this_is_a_dict.items()]

    this_is_a_dict : dict
    this_is_a_dict.items() : tuple
    After the list comprehension: list
    After the join: string

import <module>

    A module is a chunk of Python code
    After importing, you have access to a module's public functions, classes and helpers

    In [13]: sys
    Out[13]: <module 'sys' (built-in)>

    Built-in modules are not Python code, and therefore the code isn't stored in .py files. Built-in modules are likely to be written in C (sys is), and they're baked right into Python itself

Remember - EVERYTHING is an object in Python

    In the Python sense, this just means that objects can be assigned to variables or that you can pass it as an argument to a function
    Modules, functions, classes, instances of classes, etc. - all of these are object in the typical (and the Pythonic sense)

In Python, blocks are delimited by a colon, and the indentation of the code that follows

if __name__ == "__main__"

    This is a trick we can use to execute test code in a given module if the module was run as a standalone program
        If we import the module and use it in another program, __name__ will hold the value of the module name
        If we run the module as a standalone script, the value of __name__ will be "__main__"

Generators
    Benefits: cleaner code, lower memory requirements than if we were to store items in a single list
    In Python 3, range() is a generator. Use the built-in code, since it'll run very fast!
    Generators return values lazily, which means lower memory usage

== Here, I started to work through Dive Into Python 3, recognizing that my choice of Python 2 was out-of-date!

    http://www.diveintopython3.net/your-first-python-program.html

Python functions (unlike C, for instance) do not define a return datatype. If a function doesn't return a value explicitly, it will return None, the Python null value

    In Python, everything is a function, all functions return a value, and all functions start with def!
        Is everything really a function?

Variables, moreoever, are also not explicitly typed. Python keeps track of the type of a variable internally

Function arguments can be specified in any order if you name those arguments when you pass them to the function
    
    If an argument has a default value specified in the function definition, that argument is optional (the argument will hold the default value in this case, through the execution of the function)
    If you don't name the arguments when passing them in the function call, you must pass them in positional order (as defined in the function definition)
    But as soon as you have a named argument, ALL arguments following that one must also be named. Otherwise, you'll get an error like:

        SyntaxError: positional argument follows keyword argument

A docstring, if defined, must be the first thing in your Python function / program (before importing modules, etc.)

In Python, exceptions indicate some error condition raised by a child function / program, which you "handle" in some way. If you see some exception printed out to your shell, this exception is "unhandled"

    Exceptions are actually implemented as classes. Each time you issue the "raise" statement and pass a string, or something else, to it, you're creating an instance of the specified exception class (i.e. passing these data to that class's initialization method)

    Case where you may want to handle an ImportError: say you want to parse xml, and would prefer to use the lxml library since it's faster. The user must have this library installed, so if they don't, you're willing to fall back on the ElementTree class, part of the Python3 standard library:

        try:
            from lxml import etree
        except ImportError:
            import xml.etree.ElementTree as etree

    Moreover, since you're naming the module etree regardless of which one you end up using, the code that follows can reference etree.* functions and you don't have to worry about checking for the presence of a particular module afterwards

    Trying to reference a variable that hasn't yet been defined will raise a NameError exception

Datatypes

Numbers

    Python distinguishes integers and floating point numbers, primarily

    You can get the type of a variable by using the type(var) function:

    In [1]: a = 1

    In [2]: type(a)
    Out[2]: int

    In [3]: b = 1.0

    In [4]: type(b)
    Out[4]: float

    In [5]: c = 1/3

    In [6]: type(c)
    Out[6]: float

    In [7]: import pytz

    In [8]: type(pytz)
    Out[8]: module

    You can also use the isinstance() function to check whether a value or variable is of a given type (passed as an argument to the function):

        In [12]: isinstance(1, int)
        Out[12]: True

    When adding two ints, the result is an int
    When adding an int and a float, the result is a float (Python "coerces" the integer to a float for addition, THEN returns a float)

    You can manually coerce values / variables like so:

        In [13]: float(1)
        Out[13]: 1.0

        In [14]: int(3.0)
        Out[14]: 3

    Note that int will truncate, NOT round

        In [15]: int(3.9)
        Out[15]: 3

    Python 2 had two integer types - int and long. Python 3 has just one, which behaves like long (integers can be arbitrarily big)

    You can do some interesting operations with numbers:

        In [16]: 4 / 3
        Out[16]: 1.3333333333333333

        > Note that, even though 4 and 3 were both integers, Python returned a float. This is also new behavior in Python 3

        In [17]: 4 // 3
        Out[17]: 1

        > You get integer division with truncation for results that are positive with the // operator

        In [18]: - 4 // 3
        Out[18]: -2

        > BUT, when the result is negative, you're also truncating "down", which gets you a -2 in this case. This behavior can be tricky

        In [19]: 2 ** 3
        Out[19]: 8

        > The ** operator raises the base to a power: base ** power

        In [20]: 4 % 3
        Out[20]: 1

        > % is the modulo operator (gives you the remainder after performing integer division)

Fractions

    In [21]: import fractions

    In [22]: x = fractions.Fraction(1, 3)

    In [23]: x
    Out[23]: Fraction(1, 3)

    > You can also use a Fractions class in the fractions module to create fractions

    In [24]: y = fractions.Fraction(6, 4)

    In [25]: y
    Out[25]: Fraction(3, 2)

    > This will reduce fractions for you automatically

You can use numbers in a boolean context. Zero values are false, non-zero values true

Booleans

    True and False are constants defined by Python
    An expression that expects evaluation to a  boolean value (e.g. an if statement) is called a "boolean context"
        You can use virtually any expression in a boolean context, and Python will attempt to evaluate it
    Booleans can actually be treated as numbers (this is legacy from Python 2): True evaluates to 1 and False to 0

        In [9]: True + True
        Out[9]: 2

        In [10]: False + False
        Out[10]: 0

        In [11]: False + True + False
        Out[11]: 1

    but don't ever do this!

Lists
    
    Python lists are different than arrays in C, for instance, where you have to define the size and store items only of the same datatype. You don't have to do that in Python
    Akin to an array in Perl, or an ArrayList in Java

    In [26]: a_list = ['a', 'b', 'mpilgrim', 'z', 'example']

    In [27]: a_list[0]
    Out[27]: 'a'

    In [29]: a_list[-1]
    Out[29]: 'example'

    In [30]: a_list[-3]
    Out[30]: 'mpilgrim'

    > When thinking about negative indices, remember that a[-n] is equivalent to a[len(list) - n]. Here, len(a_list) is 5, so 5 - 3 = 2, the third element of the list

    In [31]: a_list[1:3]
    Out[31]: ['b', 'mpilgrim']

    In [32]: a_list[1:-1]
    Out[32]: ['b', 'mpilgrim', 'z']

    > You can "slice lists". The syntax above gives you a_list[first element : up to but not including last element]

    In [33]: a_list[:3]
    Out[33]: ['a', 'b', 'mpilgrim']

    In [34]: a_list[3:]
    Out[34]: ['z', 'example']

    In [35]: a_list[:]
    Out[35]: ['a', 'b', 'mpilgrim', 'z', 'example']

    > If you leave out the first index, Python assumes you mean 0. 
      If you leave out the last, Python assumes you mean the last element
      Leaving out both indices returns a COPY of the complete, original list

    In [37]: a_list = ['a']

    In [38]: a_list = a_list + [2.0, 3]

    In [39]: a_list
    Out[39]: ['a', 2.0, 3]

    > You can append items to a list simply by adding two lists together with +. Note that this operation creates a second list in memory
    
    In [40]: a_list.append(True)

    In [41]: a_list
    Out[41]: ['a', 2.0, 3, True]

    > You can also use the 'append' method of a list to add new elements to the end of a list

    In [42]: a_list.extend(['four', 'omega'])

    In [43]: a_list
    Out[43]: ['a', 2.0, 3, True, 'four', 'omega']

    > Extend will take each element of the list passed to it and add it to the original list on which extend is operating.
      Note that lists are implemented as classes. Therefore, you have instance methods like append and extend that you can reference with instance.method notation, like we are above

    In [44]: a_list.insert(0, 'omega')

    In [45]: a_list
    Out[45]: ['omega', 'a', 2.0, 3, True, 'four', 'omega']

    > You can insert new elements in arbitrary places in a list using the insert method. The first argument is the index that will get bumped out of place to make room for the new element

    append takes a single argument, which can be of any datatype, and adds it to the end of the list
    extend takes a list of n elements, adding those to the end of the list (you're still left with a single list)

    In [46]: l = [1, 2, 3]

    In [47]: l.extend([4, 5, 6])

    In [48]: l
    Out[48]: [1, 2, 3, 4, 5, 6]

    In [49]: l.append([7, 8, 9])

    In [50]: l
    Out[50]: [1, 2, 3, 4, 5, 6, [7, 8, 9]]

    > Remember - append can take a single argument of ANY datatype, including a list!

    In [51]: a_list = ['a', 'b', 'new', 'mpilgrim', 'new']

    In [52]: a_list.count('new')
    Out[52]: 2

    > You can count the number of times a given element appears in a specified list

    In [54]: 'new' in a_list
    Out[54]: True

    > You can ask whether a specified element is in the list at all, and get a boolean value back

    In [55]: a_list.index('mpilgrim')
    Out[55]: 3

    > You can ask at what index a specific value appears. If the value appears more than once in the list, the first index is returned

    In [56]: a_list.index('c')
    ---------------------------------------------------------------------------
    ValueError                                Traceback (most recent call last)
    <ipython-input-56-4e77f8c6f6f7> in <module>()
    ----> 1 a_list.index('c')

    ValueError: 'c' is not in list

    > If you don't check to see if the element exists in the list and ask for its index, Python will raise a ValueError exception
      This behavior might be unexpected, but it prevents you from doing stupid things with indices (like -1) that other languages would return. In the Python case, -1 is an actual index, so you don't want that returned and attemp to reference it later!

    In [57]: a_list
    Out[57]: ['a', 'b', 'new', 'mpilgrim', 'new']

    In [58]: del a_list[1]

    In [59]: a_list
    Out[59]: ['a', 'new', 'mpilgrim', 'new']

    > del list[index] will delete the element at the specified index and collapse the rest of the elements into place

    In [59]: a_list
    Out[59]: ['a', 'new', 'mpilgrim', 'new']

    In [60]: a_list.remove('new')

    In [61]: a_list
    Out[61]: ['a', 'mpilgrim', 'new']

    In [62]: a_list.remove('new')

    In [63]: a_list.remove('new')
    ---------------------------------------------------------------------------
    ValueError                                Traceback (most recent call last)
    <ipython-input-63-c2064dc3d02e> in <module>()
    ----> 1 a_list.remove('new')

    ValueError: list.remove(x): x not in list

    > You can also remove a value from a list by name with the remove method
      But, as we saw with the index() method, if the element you specify doesn't exist, Python will raise a ValueError. This is a bit more expected behavior

    In [64]: a_list = ['a', 'b', 'new', 'mpilgrim']

    In [65]: a_list.pop()
    Out[65]: 'mpilgrim'

    In [66]: a_list
    Out[66]: ['a', 'b', 'new']

    > By default, the pop method removes the last element of a list and RETURNS THE VALUE

    In [67]: a_list.pop(1)
    Out[67]: 'b'

    In [68]: a_list
    Out[68]: ['a', 'new']

    > You can also specify an index to pop

    Note that any empty list is False, and any list, even if the element contained within the list is the boolean value False, is True

Tuples

    A tuple is an immutable list (values cannot be changed after the tuple is instantiated)
    Define in the same way as a list, but with parentheses instead of brackets. Items can be referenced in the same way as a list:

        In [69]: a = ('test', 'a', 'b')

        In [70]: a[0]
        Out[70]: 'test'

    If you try to assign a new value to an element of a tuple, Python will raise a TypeError

        In [71]: a[0] = 'foo'
        ---------------------------------------------------------------------------
        TypeError                                 Traceback (most recent call last)
        <ipython-input-71-f5a3c9807bf7> in <module>()
        ----> 1 a[0] = 'foo'

        TypeError: 'tuple' object does not support item assignment

        In essence, tuples have no class methods that allow them to be changed, like append, extend, etc. with lists

    You can find elements in a tuple with similar methods as you can with a list:

        In [73]: a.index('a')
        Out[73]: 1

    Tuples are FASTER than lists!
        If you're defining a constant set of values to be iterated through, and you won't be changing the elements, use a tuple!
    Tuples guarantee immutability, which can matter in certain cases where you don't want your data to be mucked with
    Some tuples can be used as keys in dictionaries, when the values of the tuple are immutable (e.g. strings, numbers, and other tuples)

    You can convert a tuple to a list with the list() function, and a list to a tuple with the tuple() function:

        In [76]: a
        Out[76]: ('test', 'a', 'b')

        In [77]: list(a)
        Out[77]: ['test', 'a', 'b']

        In [78]: tuple(list(a))
        Out[78]: ('test', 'a', 'b')

    Like with lists, empty tuples evaluate to False and non-empty tuples evaluate to True

        In [86]: is_it_true(())
        False!

        In [87]: is_it_true(('a'))
        True!

    With a tuple, you can assign multiple values to multiple variables at once:

        In [93]: v = ('a', 2, True)

        In [94]: (x, y, z) = v

        In [95]: x
        Out[95]: 'a'

        In [96]: y
        Out[96]: 2

        In [97]: z
        Out[97]: True

    Also:

        In [98]: x, y, z = (1, 2, 3)x

    This has some interesting practical uses, e.g.

        In [102]: (MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY) = range(7)

        In [103]: MONDAY
        Out[103]: 0

        In [104]: TUESDAY
        Out[104]: 1

    The benefit of returning tuples of values, in functions with a return statement, for instance, is to allow the person calling the function to treat the tuple as a single value, or to treat them individually and assign them to separate variables

Sets
    
    A set is an unordered bag of unique values
        What is a bag?

    To define a set, wrap the unique elements you want to include in curly braces:

        In [105]: a = {1}

        In [106]: type(a)
        Out[106]: set

    You can create a set from a list with the set() function, and it will return the set of unique elements in the list:

        In [107]: a = [1, 2, 3, 3, 3]

        In [108]: set(a)
        Out[108]: {1, 2, 3}

        > To be pedantic, calling set() really instantiates a class

    You create an empty set by calling set() with no arguments, NOT with empty curly braces:

        In [109]: a_set = set()

        In [110]: type(a_set)
        Out[110]: set

        In [111]: len(a_set)
        Out[111]: 0

        In [112]: dict = {}

        In [113]: type(dict)
        Out[113]: dict

    You can use the add() method to add new elements to a set (add takes a single argument, the single value to be added to the set)

        In [114]: a_set = {1, 2}

        In [115]: a_set.add(4)

        In [116]: a_set
        Out[116]: {1, 2, 4}

    Adding an existing element won't modify the set:

        n [117]: a_set.add(1)

        In [118]: a_set
        Out[118]: {1, 2, 4}

    You can add multiple elements (effectively union a set) by using the update() method, which takes one or more sets as arguments:

        In [119]: a_set = {1, 2, 3}

        In [120]: a_set.update({2, 4, 5})

        In [121]: a_set
        Out[121]: {1, 2, 3, 4, 5}

    Remember, you can pass one or more sets to the update method:

        In [122]: a_set.update({6, 7, 8}, {9, 10, 11})

        In [123]: a_set
        Out[123]: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}

    You can remove elements of a set with either the discard() or the remove() methods. discard() fails silently if the key doesn't exist in the set, where remove() raises a KeyError if the element doesn't exist:

        In [124]: a_set = {1, 3, 6, 10, 15, 21, 28, 36, 45}

        In [125]: a_set.discard(10)

        In [126]: a_set
        Out[126]: {1, 3, 6, 15, 21, 28, 36, 45}

        In [127]: a_set.discard(10)

        In [128]: a_set.remove(10)
        ---------------------------------------------------------------------------
        KeyError                                  Traceback (most recent call last)
        <ipython-input-128-9e9927131eb2> in <module>()
        ----> 1 a_set.remove(10)

        KeyError: 10

    Sets also have a pop method, but since sets are unordered, there's no last element from the set and pop returns an arbitrary value.
    Calling pop on an empty set will raise a KeyError

    You can also remove all the elements of a set, leaving an empty set, with the clear() method

        In [133]: a_set
        Out[133]: {15, 21, 28, 45}

        In [134]: a_set.clear()

        In [135]: a_set
        Out[135]: set()

    To see whether an element is in a set, the 'in' operator works:

        In [136]: a_set = {2, 4, 5, 9, 12, 21, 30, 51, 76, 127, 195}

        In [137]: 30 in a_set
        Out[137]: True

    The union() method is called on a set, taking another set as an argument, and returns a new set containing the union of elements (elements that are in either set)

        In [138]: b_set = {1, 2, 3, 5, 6, 8, 9, 12, 15, 17, 18, 21}

        In [139]: a_set.union(b_set)
        Out[139]: {1, 2, 3, 4, 5, 6, 8, 9, 12, 15, 17, 18, 21, 30, 51, 76, 127, 195}o

    The intersection method will return a new set, with elements found in both sets

        In [140]: a_set.intersection(b_set)
        Out[140]: {2, 5, 9, 12, 21}

    The difference method will return a new set of elements that are in a_set but not b_set

        In [141]: a_set.difference(b_set)
        Out[141]: {4, 30, 51, 76, 127, 195}

    The symmetric_difference method will return the elements that are a part of exactly one set

        In [142]: a_set.symmetric_difference(b_set)
        Out[142]: {1, 3, 4, 6, 8, 15, 17, 18, 30, 51, 76, 127, 195}

    In iPython, I can <Tab><Tab> after a_set. to see the methods I can use as a part of the set class:

        In [142]: a_set.
        a_set.add                          a_set.difference_update            a_set.isdisjoint                   a_set.remove                       a_set.update
        a_set.clear                        a_set.discard                      a_set.issubset                     a_set.symmetric_difference
        a_set.copy                         a_set.intersection                 a_set.issuperset                   a_set.symmetric_difference_update
        a_set.difference                   a_set.intersection_update          a_set.pop                          a_set.union

    I can check if a set is a subset or superset of another, for instance!

    I can define a set with a trailing comma, and Python will be OK with it

        In [148]: b = {1, 2,}

        In [149]: b
        Out[149]: {1, 2}

    The symmetric difference of both sets on one another is the same:

        In [150]: a_set.symmetric_difference(b_set) == b_set.symmetric_difference(a_set)
        Out[150]: Trueo

    So is the union and intersection, but not the difference

    In a boolean context, an empty set is false, and a non-empty set is true

Dictionaries

    A dictionary is an unordered set of key-value pairs
    Python dictionaries are optimized for finding a value when you know a key
        These are like hashes in Perl

    The syntax for creating dictionaries is similar to sets:

        In [151]: a_dict = {'foo': 'bar'}

        In [152]: a_dict
        Out[152]: {'foo': 'bar'}

    You can reference keys by name, and if you try to access a key that doesn't exist in the dictionary, Python will raise a KeyError:

        In [154]: a_dict['foo']
        Out[154]: 'bar'

        In [155]: a_dict['bar']
        ---------------------------------------------------------------------------
        KeyError                                  Traceback (most recent call last)
        <ipython-input-155-86e01de40907> in <module>()
        ----> 1 a_dict['bar']

        KeyError: 'bar'

    You can change values of existing keys, and add new key-value pairs, using a similar syntax:

        In [157]: a_dict['foo'] = 'test'

        In [158]: a_dict
        Out[158]: {'foo': 'test'}

    Keys are case-sensitive:

        In [163]: a_dict['Foo'] = 'test'

        In [164]: a_dict
        Out[164]: {'Foo': 'test', 'bar': 'baz', 'foo': 'test'}

    len() gives you the number of keys in a dictionary

        In [165]: len(a_dict)
        Out[165]: 3

    Just like the rest of our data types, empty dictionaries evaluate to False and dictionaries with at least one item evaluate to True

None

    None is a special constant in Python to represent a null value
    None is NOT the same as False, 0, an empty string, etc.
    None has its own data type, NoneType

    In a boolean context, None is False and not None is True

        In [166]: if None:
           .....:     print("True")
           .....:

        In [167]: if not None:
           .....:     print("True")
           .....:
        True
        

